ERROR:
$ python2 rfcomm-server.py
Traceback (most recent call last):
  File "rfcomm-server.py", line 20, in <module>
    profiles = [ SERIAL_PORT_PROFILE ],
  File "/usr/lib/python2.7/site-packages/bluetooth/bluez.py", line 176, in advertise_service
    raise BluetoothError (str (e))
bluetooth.btcommon.BluetoothError: (2, 'No such file or directory')

SOLUTION:
If you experience the same;

Check the status of bluetooth daemon and look for the service file path (2nd line)
sudo service bluetooth status

# alternative: 
# sudo systemctl status bluetooth
In my case the service file was run at /lib/systemd/system/bluetooth.service, NOT FROM /etc/systemd/system/dbus-org.bluez.service.

bluetooth service status

Then modify the correct file (which was /lib/systemd/system/bluetooth.service in my case) to add -C to the ExecStart=/usr/lib/bluetooth/bluetoothd line as instructed in the previous answer.

Do not forget to reload daemons and restart bluetooth service before running sdptool:

sudo systemctl daemon-reload
sudo systemctl restart bluetooth

sudo sdptool add SP
Now /var/run/sdp should be generated.

-------------------------------------------------------
ERROR:
Traceback (most recent call last):
  File "rfcomm-server.py", line 7, in <module>
    advertise_service(server_sock, "SampleServer",service_classes=[SERIAL_PORT_CLASS], profiles=[SERIAL_PORT_PROFILE])
  File "/usr/lib/python2.7/dist-packages/bluetooth/bluez.py", line 176, in advertise_service
    raise BluetoothError (str (e))
bluetooth.btcommon.BluetoothError: (13, 'Permission denied')

SOLUTION:
python-bluez is basically using BlueZ 4 and we have BlueZ 5. I am guessing that you already figured out about adding --compat to the ExecStart line in bluetooth.service. (By the way, if you didn't know, you should copy /lib/systemd/system/bluetooth.service to /etc/systemd/system/bluetooth.service and edit the file in /etc, otherwise the changes will be written over during an upgrade).

What the --compat option does is add a unix socket file at /var/run/sdp. So, this is the file that needs the permission changed. You can of course do this manually, but who wants to do that every time they reboot? So, systemd to the rescue. I created two unit files.

/etc/systemd/system/var-run-sdp.path:

[Unit]
Descrption=Monitor /var/run/sdp

[Install]
WantedBy=bluetooth.service

[Path]
PathExists=/var/run/sdp
Unit=var-run-sdp.service
/etc/systemd/system/var-run-sdp.service:

[Unit]
Description=Set permission of /var/run/sdp

[Install]
RequiredBy=var-run-sdp.path

[Service]
Type=simple
ExecStart=/bin/chgrp bluetooth /var/run/sdp
I'm not sure if I got the dependencies correct, but I enabled and ran them like this:

sudo systemctl daemon-reload
sudo systemctl enable var-run-sdp.path
sudo systemctl enable var-run-sdp.service
sudo systemctl start var-run-sdp.path
What this does is monitors for the existence of /var/run/sdp (the path unit file) and when is created, set the group to bluetooth (the service unit file).

Now, you just have to add your user to the bluetooth group and you are good to go.

sudo usermod +aG bluetooth <username>
newgrp bluetooth
